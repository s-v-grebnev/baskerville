// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: basket.proto

#include "basket.pb.h"
#include "basket.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace BasketApi {

static const char* BaskApi_method_names[] = {
  "/BasketApi.BaskApi/BasketList",
  "/BasketApi.BaskApi/BasketPutFile",
};

std::unique_ptr< BaskApi::Stub> BaskApi::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< BaskApi::Stub> stub(new BaskApi::Stub(channel));
  return stub;
}

BaskApi::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_BasketList_(BaskApi_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BasketPutFile_(BaskApi_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BaskApi::Stub::BasketList(::grpc::ClientContext* context, const ::BasketApi::BasketListRequest& request, ::BasketApi::BasketListResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_BasketList_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BasketApi::BasketListResponse>* BaskApi::Stub::AsyncBasketListRaw(::grpc::ClientContext* context, const ::BasketApi::BasketListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::BasketApi::BasketListResponse>::Create(channel_.get(), cq, rpcmethod_BasketList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::BasketApi::BasketListResponse>* BaskApi::Stub::PrepareAsyncBasketListRaw(::grpc::ClientContext* context, const ::BasketApi::BasketListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::BasketApi::BasketListResponse>::Create(channel_.get(), cq, rpcmethod_BasketList_, context, request, false);
}

::grpc::Status BaskApi::Stub::BasketPutFile(::grpc::ClientContext* context, const ::BasketApi::BasketPutFileRequest& request, ::BasketApi::BasketPutFileResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_BasketPutFile_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BasketApi::BasketPutFileResponse>* BaskApi::Stub::AsyncBasketPutFileRaw(::grpc::ClientContext* context, const ::BasketApi::BasketPutFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::BasketApi::BasketPutFileResponse>::Create(channel_.get(), cq, rpcmethod_BasketPutFile_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::BasketApi::BasketPutFileResponse>* BaskApi::Stub::PrepareAsyncBasketPutFileRaw(::grpc::ClientContext* context, const ::BasketApi::BasketPutFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::BasketApi::BasketPutFileResponse>::Create(channel_.get(), cq, rpcmethod_BasketPutFile_, context, request, false);
}

BaskApi::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      BaskApi_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BaskApi::Service, ::BasketApi::BasketListRequest, ::BasketApi::BasketListResponse>(
          std::mem_fn(&BaskApi::Service::BasketList), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BaskApi_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BaskApi::Service, ::BasketApi::BasketPutFileRequest, ::BasketApi::BasketPutFileResponse>(
          std::mem_fn(&BaskApi::Service::BasketPutFile), this)));
}

BaskApi::Service::~Service() {
}

::grpc::Status BaskApi::Service::BasketList(::grpc::ServerContext* context, const ::BasketApi::BasketListRequest* request, ::BasketApi::BasketListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaskApi::Service::BasketPutFile(::grpc::ServerContext* context, const ::BasketApi::BasketPutFileRequest* request, ::BasketApi::BasketPutFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace BasketApi

