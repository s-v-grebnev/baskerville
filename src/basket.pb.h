// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basket.proto

#ifndef PROTOBUF_basket_2eproto__INCLUDED
#define PROTOBUF_basket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace BasketApi {
class BasketListRequest;
class BasketListRequestDefaultTypeInternal;
extern BasketListRequestDefaultTypeInternal _BasketListRequest_default_instance_;
class BasketListResponse;
class BasketListResponseDefaultTypeInternal;
extern BasketListResponseDefaultTypeInternal _BasketListResponse_default_instance_;
class BasketPutFileRequest;
class BasketPutFileRequestDefaultTypeInternal;
extern BasketPutFileRequestDefaultTypeInternal _BasketPutFileRequest_default_instance_;
class BasketPutFileResponse;
class BasketPutFileResponseDefaultTypeInternal;
extern BasketPutFileResponseDefaultTypeInternal _BasketPutFileResponse_default_instance_;
}  // namespace BasketApi

namespace BasketApi {

namespace protobuf_basket_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_basket_2eproto

// ===================================================================

class BasketListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BasketApi.BasketListRequest) */ {
 public:
  BasketListRequest();
  virtual ~BasketListRequest();

  BasketListRequest(const BasketListRequest& from);

  inline BasketListRequest& operator=(const BasketListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasketListRequest(BasketListRequest&& from) noexcept
    : BasketListRequest() {
    *this = ::std::move(from);
  }

  inline BasketListRequest& operator=(BasketListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasketListRequest& default_instance();

  static inline const BasketListRequest* internal_default_instance() {
    return reinterpret_cast<const BasketListRequest*>(
               &_BasketListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BasketListRequest* other);
  friend void swap(BasketListRequest& a, BasketListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasketListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BasketListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BasketListRequest& from);
  void MergeFrom(const BasketListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BasketListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string basketid = 1;
  void clear_basketid();
  static const int kBasketidFieldNumber = 1;
  const ::std::string& basketid() const;
  void set_basketid(const ::std::string& value);
  #if LANG_CXX11
  void set_basketid(::std::string&& value);
  #endif
  void set_basketid(const char* value);
  void set_basketid(const char* value, size_t size);
  ::std::string* mutable_basketid();
  ::std::string* release_basketid();
  void set_allocated_basketid(::std::string* basketid);

  // @@protoc_insertion_point(class_scope:BasketApi.BasketListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr basketid_;
  mutable int _cached_size_;
  friend struct protobuf_basket_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasketListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BasketApi.BasketListResponse) */ {
 public:
  BasketListResponse();
  virtual ~BasketListResponse();

  BasketListResponse(const BasketListResponse& from);

  inline BasketListResponse& operator=(const BasketListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasketListResponse(BasketListResponse&& from) noexcept
    : BasketListResponse() {
    *this = ::std::move(from);
  }

  inline BasketListResponse& operator=(BasketListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasketListResponse& default_instance();

  static inline const BasketListResponse* internal_default_instance() {
    return reinterpret_cast<const BasketListResponse*>(
               &_BasketListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BasketListResponse* other);
  friend void swap(BasketListResponse& a, BasketListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasketListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BasketListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BasketListResponse& from);
  void MergeFrom(const BasketListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BasketListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string filenames = 1;
  int filenames_size() const;
  void clear_filenames();
  static const int kFilenamesFieldNumber = 1;
  const ::std::string& filenames(int index) const;
  ::std::string* mutable_filenames(int index);
  void set_filenames(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_filenames(int index, ::std::string&& value);
  #endif
  void set_filenames(int index, const char* value);
  void set_filenames(int index, const char* value, size_t size);
  ::std::string* add_filenames();
  void add_filenames(const ::std::string& value);
  #if LANG_CXX11
  void add_filenames(::std::string&& value);
  #endif
  void add_filenames(const char* value);
  void add_filenames(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& filenames() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_filenames();

  // @@protoc_insertion_point(class_scope:BasketApi.BasketListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> filenames_;
  mutable int _cached_size_;
  friend struct protobuf_basket_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasketPutFileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BasketApi.BasketPutFileRequest) */ {
 public:
  BasketPutFileRequest();
  virtual ~BasketPutFileRequest();

  BasketPutFileRequest(const BasketPutFileRequest& from);

  inline BasketPutFileRequest& operator=(const BasketPutFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasketPutFileRequest(BasketPutFileRequest&& from) noexcept
    : BasketPutFileRequest() {
    *this = ::std::move(from);
  }

  inline BasketPutFileRequest& operator=(BasketPutFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasketPutFileRequest& default_instance();

  static inline const BasketPutFileRequest* internal_default_instance() {
    return reinterpret_cast<const BasketPutFileRequest*>(
               &_BasketPutFileRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BasketPutFileRequest* other);
  friend void swap(BasketPutFileRequest& a, BasketPutFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasketPutFileRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BasketPutFileRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BasketPutFileRequest& from);
  void MergeFrom(const BasketPutFileRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BasketPutFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string basketid = 1;
  void clear_basketid();
  static const int kBasketidFieldNumber = 1;
  const ::std::string& basketid() const;
  void set_basketid(const ::std::string& value);
  #if LANG_CXX11
  void set_basketid(::std::string&& value);
  #endif
  void set_basketid(const char* value);
  void set_basketid(const char* value, size_t size);
  ::std::string* mutable_basketid();
  ::std::string* release_basketid();
  void set_allocated_basketid(::std::string* basketid);

  // string filename = 2;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bytes content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // string signature = 4;
  void clear_signature();
  static const int kSignatureFieldNumber = 4;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:BasketApi.BasketPutFileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr basketid_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  mutable int _cached_size_;
  friend struct protobuf_basket_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasketPutFileResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BasketApi.BasketPutFileResponse) */ {
 public:
  BasketPutFileResponse();
  virtual ~BasketPutFileResponse();

  BasketPutFileResponse(const BasketPutFileResponse& from);

  inline BasketPutFileResponse& operator=(const BasketPutFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasketPutFileResponse(BasketPutFileResponse&& from) noexcept
    : BasketPutFileResponse() {
    *this = ::std::move(from);
  }

  inline BasketPutFileResponse& operator=(BasketPutFileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasketPutFileResponse& default_instance();

  static inline const BasketPutFileResponse* internal_default_instance() {
    return reinterpret_cast<const BasketPutFileResponse*>(
               &_BasketPutFileResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(BasketPutFileResponse* other);
  friend void swap(BasketPutFileResponse& a, BasketPutFileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasketPutFileResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BasketPutFileResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BasketPutFileResponse& from);
  void MergeFrom(const BasketPutFileResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BasketPutFileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  const ::std::string& success() const;
  void set_success(const ::std::string& value);
  #if LANG_CXX11
  void set_success(::std::string&& value);
  #endif
  void set_success(const char* value);
  void set_success(const char* value, size_t size);
  ::std::string* mutable_success();
  ::std::string* release_success();
  void set_allocated_success(::std::string* success);

  // @@protoc_insertion_point(class_scope:BasketApi.BasketPutFileResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr success_;
  mutable int _cached_size_;
  friend struct protobuf_basket_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BasketListRequest

// string basketid = 1;
inline void BasketListRequest::clear_basketid() {
  basketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BasketListRequest::basketid() const {
  // @@protoc_insertion_point(field_get:BasketApi.BasketListRequest.basketid)
  return basketid_.GetNoArena();
}
inline void BasketListRequest::set_basketid(const ::std::string& value) {
  
  basketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasketApi.BasketListRequest.basketid)
}
#if LANG_CXX11
inline void BasketListRequest::set_basketid(::std::string&& value) {
  
  basketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasketApi.BasketListRequest.basketid)
}
#endif
inline void BasketListRequest::set_basketid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  basketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasketApi.BasketListRequest.basketid)
}
inline void BasketListRequest::set_basketid(const char* value, size_t size) {
  
  basketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasketApi.BasketListRequest.basketid)
}
inline ::std::string* BasketListRequest::mutable_basketid() {
  
  // @@protoc_insertion_point(field_mutable:BasketApi.BasketListRequest.basketid)
  return basketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BasketListRequest::release_basketid() {
  // @@protoc_insertion_point(field_release:BasketApi.BasketListRequest.basketid)
  
  return basketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BasketListRequest::set_allocated_basketid(::std::string* basketid) {
  if (basketid != NULL) {
    
  } else {
    
  }
  basketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basketid);
  // @@protoc_insertion_point(field_set_allocated:BasketApi.BasketListRequest.basketid)
}

// -------------------------------------------------------------------

// BasketListResponse

// repeated string filenames = 1;
inline int BasketListResponse::filenames_size() const {
  return filenames_.size();
}
inline void BasketListResponse::clear_filenames() {
  filenames_.Clear();
}
inline const ::std::string& BasketListResponse::filenames(int index) const {
  // @@protoc_insertion_point(field_get:BasketApi.BasketListResponse.filenames)
  return filenames_.Get(index);
}
inline ::std::string* BasketListResponse::mutable_filenames(int index) {
  // @@protoc_insertion_point(field_mutable:BasketApi.BasketListResponse.filenames)
  return filenames_.Mutable(index);
}
inline void BasketListResponse::set_filenames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BasketApi.BasketListResponse.filenames)
  filenames_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BasketListResponse::set_filenames(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:BasketApi.BasketListResponse.filenames)
  filenames_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BasketListResponse::set_filenames(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  filenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BasketApi.BasketListResponse.filenames)
}
inline void BasketListResponse::set_filenames(int index, const char* value, size_t size) {
  filenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BasketApi.BasketListResponse.filenames)
}
inline ::std::string* BasketListResponse::add_filenames() {
  // @@protoc_insertion_point(field_add_mutable:BasketApi.BasketListResponse.filenames)
  return filenames_.Add();
}
inline void BasketListResponse::add_filenames(const ::std::string& value) {
  filenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BasketApi.BasketListResponse.filenames)
}
#if LANG_CXX11
inline void BasketListResponse::add_filenames(::std::string&& value) {
  filenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BasketApi.BasketListResponse.filenames)
}
#endif
inline void BasketListResponse::add_filenames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  filenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BasketApi.BasketListResponse.filenames)
}
inline void BasketListResponse::add_filenames(const char* value, size_t size) {
  filenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BasketApi.BasketListResponse.filenames)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BasketListResponse::filenames() const {
  // @@protoc_insertion_point(field_list:BasketApi.BasketListResponse.filenames)
  return filenames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BasketListResponse::mutable_filenames() {
  // @@protoc_insertion_point(field_mutable_list:BasketApi.BasketListResponse.filenames)
  return &filenames_;
}

// -------------------------------------------------------------------

// BasketPutFileRequest

// string basketid = 1;
inline void BasketPutFileRequest::clear_basketid() {
  basketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BasketPutFileRequest::basketid() const {
  // @@protoc_insertion_point(field_get:BasketApi.BasketPutFileRequest.basketid)
  return basketid_.GetNoArena();
}
inline void BasketPutFileRequest::set_basketid(const ::std::string& value) {
  
  basketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasketApi.BasketPutFileRequest.basketid)
}
#if LANG_CXX11
inline void BasketPutFileRequest::set_basketid(::std::string&& value) {
  
  basketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasketApi.BasketPutFileRequest.basketid)
}
#endif
inline void BasketPutFileRequest::set_basketid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  basketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasketApi.BasketPutFileRequest.basketid)
}
inline void BasketPutFileRequest::set_basketid(const char* value, size_t size) {
  
  basketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasketApi.BasketPutFileRequest.basketid)
}
inline ::std::string* BasketPutFileRequest::mutable_basketid() {
  
  // @@protoc_insertion_point(field_mutable:BasketApi.BasketPutFileRequest.basketid)
  return basketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BasketPutFileRequest::release_basketid() {
  // @@protoc_insertion_point(field_release:BasketApi.BasketPutFileRequest.basketid)
  
  return basketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BasketPutFileRequest::set_allocated_basketid(::std::string* basketid) {
  if (basketid != NULL) {
    
  } else {
    
  }
  basketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basketid);
  // @@protoc_insertion_point(field_set_allocated:BasketApi.BasketPutFileRequest.basketid)
}

// string filename = 2;
inline void BasketPutFileRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BasketPutFileRequest::filename() const {
  // @@protoc_insertion_point(field_get:BasketApi.BasketPutFileRequest.filename)
  return filename_.GetNoArena();
}
inline void BasketPutFileRequest::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasketApi.BasketPutFileRequest.filename)
}
#if LANG_CXX11
inline void BasketPutFileRequest::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasketApi.BasketPutFileRequest.filename)
}
#endif
inline void BasketPutFileRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasketApi.BasketPutFileRequest.filename)
}
inline void BasketPutFileRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasketApi.BasketPutFileRequest.filename)
}
inline ::std::string* BasketPutFileRequest::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:BasketApi.BasketPutFileRequest.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BasketPutFileRequest::release_filename() {
  // @@protoc_insertion_point(field_release:BasketApi.BasketPutFileRequest.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BasketPutFileRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:BasketApi.BasketPutFileRequest.filename)
}

// bytes content = 3;
inline void BasketPutFileRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BasketPutFileRequest::content() const {
  // @@protoc_insertion_point(field_get:BasketApi.BasketPutFileRequest.content)
  return content_.GetNoArena();
}
inline void BasketPutFileRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasketApi.BasketPutFileRequest.content)
}
#if LANG_CXX11
inline void BasketPutFileRequest::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasketApi.BasketPutFileRequest.content)
}
#endif
inline void BasketPutFileRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasketApi.BasketPutFileRequest.content)
}
inline void BasketPutFileRequest::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasketApi.BasketPutFileRequest.content)
}
inline ::std::string* BasketPutFileRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:BasketApi.BasketPutFileRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BasketPutFileRequest::release_content() {
  // @@protoc_insertion_point(field_release:BasketApi.BasketPutFileRequest.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BasketPutFileRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:BasketApi.BasketPutFileRequest.content)
}

// string signature = 4;
inline void BasketPutFileRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BasketPutFileRequest::signature() const {
  // @@protoc_insertion_point(field_get:BasketApi.BasketPutFileRequest.signature)
  return signature_.GetNoArena();
}
inline void BasketPutFileRequest::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasketApi.BasketPutFileRequest.signature)
}
#if LANG_CXX11
inline void BasketPutFileRequest::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasketApi.BasketPutFileRequest.signature)
}
#endif
inline void BasketPutFileRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasketApi.BasketPutFileRequest.signature)
}
inline void BasketPutFileRequest::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasketApi.BasketPutFileRequest.signature)
}
inline ::std::string* BasketPutFileRequest::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:BasketApi.BasketPutFileRequest.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BasketPutFileRequest::release_signature() {
  // @@protoc_insertion_point(field_release:BasketApi.BasketPutFileRequest.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BasketPutFileRequest::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:BasketApi.BasketPutFileRequest.signature)
}

// -------------------------------------------------------------------

// BasketPutFileResponse

// string success = 1;
inline void BasketPutFileResponse::clear_success() {
  success_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BasketPutFileResponse::success() const {
  // @@protoc_insertion_point(field_get:BasketApi.BasketPutFileResponse.success)
  return success_.GetNoArena();
}
inline void BasketPutFileResponse::set_success(const ::std::string& value) {
  
  success_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasketApi.BasketPutFileResponse.success)
}
#if LANG_CXX11
inline void BasketPutFileResponse::set_success(::std::string&& value) {
  
  success_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasketApi.BasketPutFileResponse.success)
}
#endif
inline void BasketPutFileResponse::set_success(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  success_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasketApi.BasketPutFileResponse.success)
}
inline void BasketPutFileResponse::set_success(const char* value, size_t size) {
  
  success_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasketApi.BasketPutFileResponse.success)
}
inline ::std::string* BasketPutFileResponse::mutable_success() {
  
  // @@protoc_insertion_point(field_mutable:BasketApi.BasketPutFileResponse.success)
  return success_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BasketPutFileResponse::release_success() {
  // @@protoc_insertion_point(field_release:BasketApi.BasketPutFileResponse.success)
  
  return success_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BasketPutFileResponse::set_allocated_success(::std::string* success) {
  if (success != NULL) {
    
  } else {
    
  }
  success_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), success);
  // @@protoc_insertion_point(field_set_allocated:BasketApi.BasketPutFileResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace BasketApi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_basket_2eproto__INCLUDED
