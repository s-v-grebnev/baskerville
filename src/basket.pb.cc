// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "basket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace BasketApi {
class BasketListRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BasketListRequest>
     _instance;
} _BasketListRequest_default_instance_;
class BasketListResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BasketListResponse>
     _instance;
} _BasketListResponse_default_instance_;
class BasketPutFileRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BasketPutFileRequest>
     _instance;
} _BasketPutFileRequest_default_instance_;
class BasketPutFileResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BasketPutFileResponse>
     _instance;
} _BasketPutFileResponse_default_instance_;

namespace protobuf_basket_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasketListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasketListRequest, basketid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasketListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasketListResponse, filenames_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasketPutFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasketPutFileRequest, basketid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasketPutFileRequest, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasketPutFileRequest, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasketPutFileRequest, signature_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasketPutFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasketPutFileResponse, success_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(BasketListRequest)},
  { 6, -1, sizeof(BasketListResponse)},
  { 12, -1, sizeof(BasketPutFileRequest)},
  { 21, -1, sizeof(BasketPutFileResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BasketListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BasketListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BasketPutFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BasketPutFileResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "basket.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _BasketListRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BasketListRequest_default_instance_);_BasketListResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BasketListResponse_default_instance_);_BasketPutFileRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BasketPutFileRequest_default_instance_);_BasketPutFileResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BasketPutFileResponse_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014basket.proto\022\tBasketApi\"%\n\021BasketListR"
      "equest\022\020\n\010basketid\030\001 \001(\t\"\'\n\022BasketListRe"
      "sponse\022\021\n\tfilenames\030\001 \003(\t\"^\n\024BasketPutFi"
      "leRequest\022\020\n\010basketid\030\001 \001(\t\022\020\n\010filename\030"
      "\002 \001(\t\022\017\n\007content\030\003 \001(\014\022\021\n\tsignature\030\004 \001("
      "\t\"(\n\025BasketPutFileResponse\022\017\n\007success\030\001 "
      "\001(\t2\254\001\n\007BaskApi\022K\n\nBasketList\022\034.BasketAp"
      "i.BasketListRequest\032\035.BasketApi.BasketLi"
      "stResponse\"\000\022T\n\rBasketPutFile\022\037.BasketAp"
      "i.BasketPutFileRequest\032 .BasketApi.Baske"
      "tPutFileResponse\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 426);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "basket.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_basket_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasketListRequest::kBasketidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasketListRequest::BasketListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basket_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:BasketApi.BasketListRequest)
}
BasketListRequest::BasketListRequest(const BasketListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  basketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.basketid().size() > 0) {
    basketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basketid_);
  }
  // @@protoc_insertion_point(copy_constructor:BasketApi.BasketListRequest)
}

void BasketListRequest::SharedCtor() {
  basketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BasketListRequest::~BasketListRequest() {
  // @@protoc_insertion_point(destructor:BasketApi.BasketListRequest)
  SharedDtor();
}

void BasketListRequest::SharedDtor() {
  basketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BasketListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasketListRequest::descriptor() {
  protobuf_basket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basket_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BasketListRequest& BasketListRequest::default_instance() {
  protobuf_basket_2eproto::InitDefaults();
  return *internal_default_instance();
}

BasketListRequest* BasketListRequest::New(::google::protobuf::Arena* arena) const {
  BasketListRequest* n = new BasketListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasketListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BasketApi.BasketListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  basketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool BasketListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BasketApi.BasketListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string basketid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->basketid().data(), static_cast<int>(this->basketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BasketApi.BasketListRequest.basketid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BasketApi.BasketListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BasketApi.BasketListRequest)
  return false;
#undef DO_
}

void BasketListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BasketApi.BasketListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string basketid = 1;
  if (this->basketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basketid().data(), static_cast<int>(this->basketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BasketApi.BasketListRequest.basketid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->basketid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:BasketApi.BasketListRequest)
}

::google::protobuf::uint8* BasketListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BasketApi.BasketListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string basketid = 1;
  if (this->basketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basketid().data(), static_cast<int>(this->basketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BasketApi.BasketListRequest.basketid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->basketid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BasketApi.BasketListRequest)
  return target;
}

size_t BasketListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BasketApi.BasketListRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string basketid = 1;
  if (this->basketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->basketid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasketListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BasketApi.BasketListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BasketListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BasketListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BasketApi.BasketListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BasketApi.BasketListRequest)
    MergeFrom(*source);
  }
}

void BasketListRequest::MergeFrom(const BasketListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BasketApi.BasketListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.basketid().size() > 0) {

    basketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basketid_);
  }
}

void BasketListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BasketApi.BasketListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasketListRequest::CopyFrom(const BasketListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BasketApi.BasketListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasketListRequest::IsInitialized() const {
  return true;
}

void BasketListRequest::Swap(BasketListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasketListRequest::InternalSwap(BasketListRequest* other) {
  using std::swap;
  basketid_.Swap(&other->basketid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BasketListRequest::GetMetadata() const {
  protobuf_basket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basket_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BasketListRequest

// string basketid = 1;
void BasketListRequest::clear_basketid() {
  basketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BasketListRequest::basketid() const {
  // @@protoc_insertion_point(field_get:BasketApi.BasketListRequest.basketid)
  return basketid_.GetNoArena();
}
void BasketListRequest::set_basketid(const ::std::string& value) {
  
  basketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasketApi.BasketListRequest.basketid)
}
#if LANG_CXX11
void BasketListRequest::set_basketid(::std::string&& value) {
  
  basketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasketApi.BasketListRequest.basketid)
}
#endif
void BasketListRequest::set_basketid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  basketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasketApi.BasketListRequest.basketid)
}
void BasketListRequest::set_basketid(const char* value, size_t size) {
  
  basketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasketApi.BasketListRequest.basketid)
}
::std::string* BasketListRequest::mutable_basketid() {
  
  // @@protoc_insertion_point(field_mutable:BasketApi.BasketListRequest.basketid)
  return basketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BasketListRequest::release_basketid() {
  // @@protoc_insertion_point(field_release:BasketApi.BasketListRequest.basketid)
  
  return basketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BasketListRequest::set_allocated_basketid(::std::string* basketid) {
  if (basketid != NULL) {
    
  } else {
    
  }
  basketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basketid);
  // @@protoc_insertion_point(field_set_allocated:BasketApi.BasketListRequest.basketid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasketListResponse::kFilenamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasketListResponse::BasketListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basket_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:BasketApi.BasketListResponse)
}
BasketListResponse::BasketListResponse(const BasketListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filenames_(from.filenames_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BasketApi.BasketListResponse)
}

void BasketListResponse::SharedCtor() {
  _cached_size_ = 0;
}

BasketListResponse::~BasketListResponse() {
  // @@protoc_insertion_point(destructor:BasketApi.BasketListResponse)
  SharedDtor();
}

void BasketListResponse::SharedDtor() {
}

void BasketListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasketListResponse::descriptor() {
  protobuf_basket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basket_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BasketListResponse& BasketListResponse::default_instance() {
  protobuf_basket_2eproto::InitDefaults();
  return *internal_default_instance();
}

BasketListResponse* BasketListResponse::New(::google::protobuf::Arena* arena) const {
  BasketListResponse* n = new BasketListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasketListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BasketApi.BasketListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filenames_.Clear();
  _internal_metadata_.Clear();
}

bool BasketListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BasketApi.BasketListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string filenames = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filenames()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filenames(this->filenames_size() - 1).data(),
            static_cast<int>(this->filenames(this->filenames_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BasketApi.BasketListResponse.filenames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BasketApi.BasketListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BasketApi.BasketListResponse)
  return false;
#undef DO_
}

void BasketListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BasketApi.BasketListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string filenames = 1;
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filenames(i).data(), static_cast<int>(this->filenames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BasketApi.BasketListResponse.filenames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filenames(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:BasketApi.BasketListResponse)
}

::google::protobuf::uint8* BasketListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BasketApi.BasketListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string filenames = 1;
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filenames(i).data(), static_cast<int>(this->filenames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BasketApi.BasketListResponse.filenames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->filenames(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BasketApi.BasketListResponse)
  return target;
}

size_t BasketListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BasketApi.BasketListResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string filenames = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->filenames_size());
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filenames(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasketListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BasketApi.BasketListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BasketListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BasketListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BasketApi.BasketListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BasketApi.BasketListResponse)
    MergeFrom(*source);
  }
}

void BasketListResponse::MergeFrom(const BasketListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BasketApi.BasketListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filenames_.MergeFrom(from.filenames_);
}

void BasketListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BasketApi.BasketListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasketListResponse::CopyFrom(const BasketListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BasketApi.BasketListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasketListResponse::IsInitialized() const {
  return true;
}

void BasketListResponse::Swap(BasketListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasketListResponse::InternalSwap(BasketListResponse* other) {
  using std::swap;
  filenames_.InternalSwap(&other->filenames_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BasketListResponse::GetMetadata() const {
  protobuf_basket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basket_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BasketListResponse

// repeated string filenames = 1;
int BasketListResponse::filenames_size() const {
  return filenames_.size();
}
void BasketListResponse::clear_filenames() {
  filenames_.Clear();
}
const ::std::string& BasketListResponse::filenames(int index) const {
  // @@protoc_insertion_point(field_get:BasketApi.BasketListResponse.filenames)
  return filenames_.Get(index);
}
::std::string* BasketListResponse::mutable_filenames(int index) {
  // @@protoc_insertion_point(field_mutable:BasketApi.BasketListResponse.filenames)
  return filenames_.Mutable(index);
}
void BasketListResponse::set_filenames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BasketApi.BasketListResponse.filenames)
  filenames_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void BasketListResponse::set_filenames(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:BasketApi.BasketListResponse.filenames)
  filenames_.Mutable(index)->assign(std::move(value));
}
#endif
void BasketListResponse::set_filenames(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  filenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BasketApi.BasketListResponse.filenames)
}
void BasketListResponse::set_filenames(int index, const char* value, size_t size) {
  filenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BasketApi.BasketListResponse.filenames)
}
::std::string* BasketListResponse::add_filenames() {
  // @@protoc_insertion_point(field_add_mutable:BasketApi.BasketListResponse.filenames)
  return filenames_.Add();
}
void BasketListResponse::add_filenames(const ::std::string& value) {
  filenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BasketApi.BasketListResponse.filenames)
}
#if LANG_CXX11
void BasketListResponse::add_filenames(::std::string&& value) {
  filenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BasketApi.BasketListResponse.filenames)
}
#endif
void BasketListResponse::add_filenames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  filenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BasketApi.BasketListResponse.filenames)
}
void BasketListResponse::add_filenames(const char* value, size_t size) {
  filenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BasketApi.BasketListResponse.filenames)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BasketListResponse::filenames() const {
  // @@protoc_insertion_point(field_list:BasketApi.BasketListResponse.filenames)
  return filenames_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BasketListResponse::mutable_filenames() {
  // @@protoc_insertion_point(field_mutable_list:BasketApi.BasketListResponse.filenames)
  return &filenames_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasketPutFileRequest::kBasketidFieldNumber;
const int BasketPutFileRequest::kFilenameFieldNumber;
const int BasketPutFileRequest::kContentFieldNumber;
const int BasketPutFileRequest::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasketPutFileRequest::BasketPutFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basket_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:BasketApi.BasketPutFileRequest)
}
BasketPutFileRequest::BasketPutFileRequest(const BasketPutFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  basketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.basketid().size() > 0) {
    basketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basketid_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:BasketApi.BasketPutFileRequest)
}

void BasketPutFileRequest::SharedCtor() {
  basketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BasketPutFileRequest::~BasketPutFileRequest() {
  // @@protoc_insertion_point(destructor:BasketApi.BasketPutFileRequest)
  SharedDtor();
}

void BasketPutFileRequest::SharedDtor() {
  basketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BasketPutFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasketPutFileRequest::descriptor() {
  protobuf_basket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basket_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BasketPutFileRequest& BasketPutFileRequest::default_instance() {
  protobuf_basket_2eproto::InitDefaults();
  return *internal_default_instance();
}

BasketPutFileRequest* BasketPutFileRequest::New(::google::protobuf::Arena* arena) const {
  BasketPutFileRequest* n = new BasketPutFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasketPutFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BasketApi.BasketPutFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  basketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool BasketPutFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BasketApi.BasketPutFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string basketid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->basketid().data(), static_cast<int>(this->basketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BasketApi.BasketPutFileRequest.basketid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BasketApi.BasketPutFileRequest.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), static_cast<int>(this->signature().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BasketApi.BasketPutFileRequest.signature"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BasketApi.BasketPutFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BasketApi.BasketPutFileRequest)
  return false;
#undef DO_
}

void BasketPutFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BasketApi.BasketPutFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string basketid = 1;
  if (this->basketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basketid().data(), static_cast<int>(this->basketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BasketApi.BasketPutFileRequest.basketid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->basketid(), output);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BasketApi.BasketPutFileRequest.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  // string signature = 4;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BasketApi.BasketPutFileRequest.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->signature(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:BasketApi.BasketPutFileRequest)
}

::google::protobuf::uint8* BasketPutFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BasketApi.BasketPutFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string basketid = 1;
  if (this->basketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basketid().data(), static_cast<int>(this->basketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BasketApi.BasketPutFileRequest.basketid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->basketid(), target);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BasketApi.BasketPutFileRequest.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // string signature = 4;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BasketApi.BasketPutFileRequest.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->signature(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BasketApi.BasketPutFileRequest)
  return target;
}

size_t BasketPutFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BasketApi.BasketPutFileRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string basketid = 1;
  if (this->basketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->basketid());
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // string signature = 4;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasketPutFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BasketApi.BasketPutFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BasketPutFileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BasketPutFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BasketApi.BasketPutFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BasketApi.BasketPutFileRequest)
    MergeFrom(*source);
  }
}

void BasketPutFileRequest::MergeFrom(const BasketPutFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BasketApi.BasketPutFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.basketid().size() > 0) {

    basketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basketid_);
  }
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void BasketPutFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BasketApi.BasketPutFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasketPutFileRequest::CopyFrom(const BasketPutFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BasketApi.BasketPutFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasketPutFileRequest::IsInitialized() const {
  return true;
}

void BasketPutFileRequest::Swap(BasketPutFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasketPutFileRequest::InternalSwap(BasketPutFileRequest* other) {
  using std::swap;
  basketid_.Swap(&other->basketid_);
  filename_.Swap(&other->filename_);
  content_.Swap(&other->content_);
  signature_.Swap(&other->signature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BasketPutFileRequest::GetMetadata() const {
  protobuf_basket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basket_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BasketPutFileRequest

// string basketid = 1;
void BasketPutFileRequest::clear_basketid() {
  basketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BasketPutFileRequest::basketid() const {
  // @@protoc_insertion_point(field_get:BasketApi.BasketPutFileRequest.basketid)
  return basketid_.GetNoArena();
}
void BasketPutFileRequest::set_basketid(const ::std::string& value) {
  
  basketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasketApi.BasketPutFileRequest.basketid)
}
#if LANG_CXX11
void BasketPutFileRequest::set_basketid(::std::string&& value) {
  
  basketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasketApi.BasketPutFileRequest.basketid)
}
#endif
void BasketPutFileRequest::set_basketid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  basketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasketApi.BasketPutFileRequest.basketid)
}
void BasketPutFileRequest::set_basketid(const char* value, size_t size) {
  
  basketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasketApi.BasketPutFileRequest.basketid)
}
::std::string* BasketPutFileRequest::mutable_basketid() {
  
  // @@protoc_insertion_point(field_mutable:BasketApi.BasketPutFileRequest.basketid)
  return basketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BasketPutFileRequest::release_basketid() {
  // @@protoc_insertion_point(field_release:BasketApi.BasketPutFileRequest.basketid)
  
  return basketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BasketPutFileRequest::set_allocated_basketid(::std::string* basketid) {
  if (basketid != NULL) {
    
  } else {
    
  }
  basketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basketid);
  // @@protoc_insertion_point(field_set_allocated:BasketApi.BasketPutFileRequest.basketid)
}

// string filename = 2;
void BasketPutFileRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BasketPutFileRequest::filename() const {
  // @@protoc_insertion_point(field_get:BasketApi.BasketPutFileRequest.filename)
  return filename_.GetNoArena();
}
void BasketPutFileRequest::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasketApi.BasketPutFileRequest.filename)
}
#if LANG_CXX11
void BasketPutFileRequest::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasketApi.BasketPutFileRequest.filename)
}
#endif
void BasketPutFileRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasketApi.BasketPutFileRequest.filename)
}
void BasketPutFileRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasketApi.BasketPutFileRequest.filename)
}
::std::string* BasketPutFileRequest::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:BasketApi.BasketPutFileRequest.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BasketPutFileRequest::release_filename() {
  // @@protoc_insertion_point(field_release:BasketApi.BasketPutFileRequest.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BasketPutFileRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:BasketApi.BasketPutFileRequest.filename)
}

// bytes content = 3;
void BasketPutFileRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BasketPutFileRequest::content() const {
  // @@protoc_insertion_point(field_get:BasketApi.BasketPutFileRequest.content)
  return content_.GetNoArena();
}
void BasketPutFileRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasketApi.BasketPutFileRequest.content)
}
#if LANG_CXX11
void BasketPutFileRequest::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasketApi.BasketPutFileRequest.content)
}
#endif
void BasketPutFileRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasketApi.BasketPutFileRequest.content)
}
void BasketPutFileRequest::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasketApi.BasketPutFileRequest.content)
}
::std::string* BasketPutFileRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:BasketApi.BasketPutFileRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BasketPutFileRequest::release_content() {
  // @@protoc_insertion_point(field_release:BasketApi.BasketPutFileRequest.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BasketPutFileRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:BasketApi.BasketPutFileRequest.content)
}

// string signature = 4;
void BasketPutFileRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BasketPutFileRequest::signature() const {
  // @@protoc_insertion_point(field_get:BasketApi.BasketPutFileRequest.signature)
  return signature_.GetNoArena();
}
void BasketPutFileRequest::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasketApi.BasketPutFileRequest.signature)
}
#if LANG_CXX11
void BasketPutFileRequest::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasketApi.BasketPutFileRequest.signature)
}
#endif
void BasketPutFileRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasketApi.BasketPutFileRequest.signature)
}
void BasketPutFileRequest::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasketApi.BasketPutFileRequest.signature)
}
::std::string* BasketPutFileRequest::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:BasketApi.BasketPutFileRequest.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BasketPutFileRequest::release_signature() {
  // @@protoc_insertion_point(field_release:BasketApi.BasketPutFileRequest.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BasketPutFileRequest::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:BasketApi.BasketPutFileRequest.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasketPutFileResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasketPutFileResponse::BasketPutFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basket_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:BasketApi.BasketPutFileResponse)
}
BasketPutFileResponse::BasketPutFileResponse(const BasketPutFileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.success().size() > 0) {
    success_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.success_);
  }
  // @@protoc_insertion_point(copy_constructor:BasketApi.BasketPutFileResponse)
}

void BasketPutFileResponse::SharedCtor() {
  success_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BasketPutFileResponse::~BasketPutFileResponse() {
  // @@protoc_insertion_point(destructor:BasketApi.BasketPutFileResponse)
  SharedDtor();
}

void BasketPutFileResponse::SharedDtor() {
  success_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BasketPutFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasketPutFileResponse::descriptor() {
  protobuf_basket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basket_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BasketPutFileResponse& BasketPutFileResponse::default_instance() {
  protobuf_basket_2eproto::InitDefaults();
  return *internal_default_instance();
}

BasketPutFileResponse* BasketPutFileResponse::New(::google::protobuf::Arena* arena) const {
  BasketPutFileResponse* n = new BasketPutFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasketPutFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BasketApi.BasketPutFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool BasketPutFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BasketApi.BasketPutFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_success()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->success().data(), static_cast<int>(this->success().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BasketApi.BasketPutFileResponse.success"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BasketApi.BasketPutFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BasketApi.BasketPutFileResponse)
  return false;
#undef DO_
}

void BasketPutFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BasketApi.BasketPutFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string success = 1;
  if (this->success().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->success().data(), static_cast<int>(this->success().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BasketApi.BasketPutFileResponse.success");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->success(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:BasketApi.BasketPutFileResponse)
}

::google::protobuf::uint8* BasketPutFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BasketApi.BasketPutFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string success = 1;
  if (this->success().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->success().data(), static_cast<int>(this->success().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BasketApi.BasketPutFileResponse.success");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->success(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BasketApi.BasketPutFileResponse)
  return target;
}

size_t BasketPutFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BasketApi.BasketPutFileResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string success = 1;
  if (this->success().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->success());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasketPutFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BasketApi.BasketPutFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BasketPutFileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BasketPutFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BasketApi.BasketPutFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BasketApi.BasketPutFileResponse)
    MergeFrom(*source);
  }
}

void BasketPutFileResponse::MergeFrom(const BasketPutFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BasketApi.BasketPutFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success().size() > 0) {

    success_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.success_);
  }
}

void BasketPutFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BasketApi.BasketPutFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasketPutFileResponse::CopyFrom(const BasketPutFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BasketApi.BasketPutFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasketPutFileResponse::IsInitialized() const {
  return true;
}

void BasketPutFileResponse::Swap(BasketPutFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasketPutFileResponse::InternalSwap(BasketPutFileResponse* other) {
  using std::swap;
  success_.Swap(&other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BasketPutFileResponse::GetMetadata() const {
  protobuf_basket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basket_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BasketPutFileResponse

// string success = 1;
void BasketPutFileResponse::clear_success() {
  success_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BasketPutFileResponse::success() const {
  // @@protoc_insertion_point(field_get:BasketApi.BasketPutFileResponse.success)
  return success_.GetNoArena();
}
void BasketPutFileResponse::set_success(const ::std::string& value) {
  
  success_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasketApi.BasketPutFileResponse.success)
}
#if LANG_CXX11
void BasketPutFileResponse::set_success(::std::string&& value) {
  
  success_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasketApi.BasketPutFileResponse.success)
}
#endif
void BasketPutFileResponse::set_success(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  success_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasketApi.BasketPutFileResponse.success)
}
void BasketPutFileResponse::set_success(const char* value, size_t size) {
  
  success_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasketApi.BasketPutFileResponse.success)
}
::std::string* BasketPutFileResponse::mutable_success() {
  
  // @@protoc_insertion_point(field_mutable:BasketApi.BasketPutFileResponse.success)
  return success_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BasketPutFileResponse::release_success() {
  // @@protoc_insertion_point(field_release:BasketApi.BasketPutFileResponse.success)
  
  return success_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BasketPutFileResponse::set_allocated_success(::std::string* success) {
  if (success != NULL) {
    
  } else {
    
  }
  success_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), success);
  // @@protoc_insertion_point(field_set_allocated:BasketApi.BasketPutFileResponse.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace BasketApi

// @@protoc_insertion_point(global_scope)
